import { SizeUnit, ResizeHandlePlacement } from "../core-types";
import * as React from "react";
import * as PropTypes from "prop-types";
import { IReactSpaceCommonProps, IResizeHandleProps } from "../core-react";
export interface IResizableProps extends IReactSpaceCommonProps {
    size: SizeUnit;
    order?: number;
    handleSize?: number;
    touchHandleSize?: number;
    handlePlacement?: ResizeHandlePlacement;
    handleRender?: (handleProps: IResizeHandleProps) => React.ReactNode;
    minimumSize?: number;
    maximumSize?: number;
    onResizeStart?: () => void | boolean;
    onResizeEnd?: (newSize: SizeUnit) => void;
}
export declare const resizableProps: {
    size: PropTypes.Validator<string | number>;
    order: PropTypes.Requireable<number>;
    handleSize: PropTypes.Requireable<number>;
    touchHandleSize: PropTypes.Requireable<number>;
    handlePlacement: PropTypes.Requireable<ResizeHandlePlacement>;
    handleRender: PropTypes.Requireable<(...args: any[]) => any>;
    minimumSize: PropTypes.Requireable<number>;
    maximumSize: PropTypes.Requireable<number>;
    onResizeStart: PropTypes.Requireable<(...args: any[]) => any>;
    onResizeEnd: PropTypes.Requireable<(...args: any[]) => any>;
    id: PropTypes.Requireable<string>;
    className: PropTypes.Requireable<string>;
    style: PropTypes.Requireable<object>;
    as: PropTypes.Requireable<any>;
    centerContent: PropTypes.Requireable<import("../core-types").CenterType>;
    zIndex: PropTypes.Requireable<number>;
    scrollable: PropTypes.Requireable<boolean>;
    trackSize: PropTypes.Requireable<boolean>;
    allowOverflow: PropTypes.Requireable<boolean>;
    onClick: PropTypes.Requireable<(...args: any[]) => any>;
    onDoubleClick: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseDown: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseMove: PropTypes.Requireable<(...args: any[]) => any>;
    onTouchStart: PropTypes.Requireable<(...args: any[]) => any>;
    onTouchMove: PropTypes.Requireable<(...args: any[]) => any>;
    onTouchEnd: PropTypes.Requireable<(...args: any[]) => any>;
};
export interface IAnchorProps extends IResizableProps {
    resizable?: boolean;
}
export declare const anchoredProps: {
    resizable: PropTypes.Requireable<boolean>;
    size: PropTypes.Validator<string | number>;
    order: PropTypes.Requireable<number>;
    handleSize: PropTypes.Requireable<number>;
    touchHandleSize: PropTypes.Requireable<number>;
    handlePlacement: PropTypes.Requireable<ResizeHandlePlacement>;
    handleRender: PropTypes.Requireable<(...args: any[]) => any>;
    minimumSize: PropTypes.Requireable<number>;
    maximumSize: PropTypes.Requireable<number>;
    onResizeStart: PropTypes.Requireable<(...args: any[]) => any>;
    onResizeEnd: PropTypes.Requireable<(...args: any[]) => any>;
    id: PropTypes.Requireable<string>;
    className: PropTypes.Requireable<string>;
    style: PropTypes.Requireable<object>;
    as: PropTypes.Requireable<any>;
    centerContent: PropTypes.Requireable<import("../core-types").CenterType>;
    zIndex: PropTypes.Requireable<number>;
    scrollable: PropTypes.Requireable<boolean>;
    trackSize: PropTypes.Requireable<boolean>;
    allowOverflow: PropTypes.Requireable<boolean>;
    onClick: PropTypes.Requireable<(...args: any[]) => any>;
    onDoubleClick: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseDown: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseMove: PropTypes.Requireable<(...args: any[]) => any>;
    onTouchStart: PropTypes.Requireable<(...args: any[]) => any>;
    onTouchMove: PropTypes.Requireable<(...args: any[]) => any>;
    onTouchEnd: PropTypes.Requireable<(...args: any[]) => any>;
};
export declare const LeftResizable: React.FC<IResizableProps>;
export declare const Left: React.FC<IAnchorProps>;
export declare const TopResizable: React.FC<IResizableProps>;
export declare const Top: React.FC<IAnchorProps>;
export declare const RightResizable: React.FC<IResizableProps>;
export declare const Right: React.FC<IAnchorProps>;
export declare const BottomResizable: React.FC<IResizableProps>;
export declare const Bottom: React.FC<IAnchorProps>;
